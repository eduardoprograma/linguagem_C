#include <glut.h>
#include <cmath>
#include<iostream>
#include <ctime>
#include<cstdlib>

// -lglut32 -lglu32 -lopengl32

using namespace std;


const int numBolas=500;

long int inicial=time(NULL);
long int final, quadros=0;
const int FPS=60;
 
const int LARGURA=800;
const int ALTURA=600;

const float PI=3.1416;

struct PVector
{ 
	float x;
	float y;
}; 

struct Bola
{
	PVector posicao;
	float raio;
	PVector veloc;
	PVector acel;
	float cor[3];	
};

Bola bola[numBolas];


int aleatorio(int inicio, int fim)
{
	return rand()%(fim-inicio+1)+inicio;
}

void desenhaBola(PVector pos, float r,float cor[3])
{
	
	float incr=0.1;
	glColor3fv(cor);
	glBegin(GL_POLYGON);
		for(float angulo=0;angulo<2*PI;angulo+=incr)
		{
			float x=pos.x+r*cos(angulo);
			float y=pos.y+r*sin(angulo);
			glVertex2f(x,y);			
		}
	glEnd();
	
}

void borda(Bola *b)
{
	if(b->posicao.y<=b->raio)
	{
		b->posicao.y=b->raio;
		b->veloc.y*=-1;
		
	}
	
	if(b->posicao.y>=ALTURA-b->raio)
	{
		b->posicao.y=ALTURA-b->raio;
		b->veloc.y*=-1;
		
	}
	
	if(b->posicao.x>=LARGURA-b->raio)
	{
		b->veloc.x*=-1;
		b->posicao.x=LARGURA-b->raio;
	}
	
	if(b->posicao.x<=b->raio)
	{
		b->veloc.x*=-1;
		b->posicao.x=b->raio;
	}
	
}

void moveBola(Bola *b)
{
	b->veloc.x+=b->acel.x;
	b->veloc.y+=b->acel.y;
	
	b->posicao.x+=b->veloc.x;
	b->posicao.y+=b->veloc.y;
	borda(b);
	
}



void desenha()
{
	glClear(GL_COLOR_BUFFER_BIT);
	
	for(int i=0; i< numBolas; i++)
		desenhaBola(bola[i].posicao, bola[i].raio, bola[i].cor);
	
	glutSwapBuffers();
	
	quadros++;
	final=time(NULL);
	if(final-inicial>0)
	{
		cout<<"FPS: " <<quadros/(final-inicial)<<endl;
		quadros=0;
		inicial=final;
	}

	
}


void criaBola()
{
	for(int i=0;i<numBolas;i++)
	{
		bola[i].posicao.x=aleatorio(0,LARGURA);
		bola[i].posicao.y=aleatorio(0,ALTURA);
		bola[i].raio=aleatorio(1,3);
		bola[i].veloc.x=aleatorio(-5,5);
		bola[i].veloc.y=aleatorio(-5,5);
		bola[i].acel.x=0;
		bola[i].acel.y=0;
		bola[i].cor[0]=aleatorio(0,100)/100.0;
		bola[i].cor[1]=aleatorio(0,100)/100.0;
		bola[i].cor[2]=aleatorio(0,100)/100.0;
			
	}
	
}


void init()
{
	
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowSize(LARGURA, ALTURA);
	glutInitWindowPosition(400,50);
	glutCreateWindow("Bolas");
	glClearColor(0, 0, 0, 0);// fundo preto
	
    
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluOrtho2D(0,LARGURA,0,ALTURA);
    
    criaBola();
}

void idle(int)
{
	for(int i=0;i<numBolas;i++)
		moveBola(&bola[i]);
	glutPostRedisplay();
	glutTimerFunc(1000/FPS,idle,0);
}

int main(int argc, char* argv[]) {

	
	glutInit(&argc, argv);
	init();      	
	glutDisplayFunc(desenha);
	glutTimerFunc(1000/FPS,idle,0);
	
	glutMainLoop();
	return 0;
}